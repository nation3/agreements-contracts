# Subgraph Schema: Agreement Framework
# Version: 0.1.0

enum AgreementStatus {
    Created
    Ongoing
    Finalized
    Disputed
}

enum PositionStatus {
    Joined,
    Finalized,
    Withdrawn,
    Disputed
}

type Agreement @entity {
    "Agreement ID"
    id: String!
    
    "Hash of the detailed terms of the agreement"
    termsHash: Bytes!

    "Required amount to join or merkle root of (address,amount)"
    criteria: BigInt!

    "Agreement Metadata URI"
    metadataURI: String!

    "Agreement token address"
    token: Bytes!

    "Status of the agreement"
    status: AgreementStatus!

    "Time of the agreement creation"
    createdAt: BigInt!

    "Positions of the agreement"
    positions: [AgreementPosition!] @derivedFrom(field: "agreement")

    "Submitted resolution for a dispute, if available"
    dispute: Dispute @derivedFrom(field: "agreement")
}

type AgreementPosition @entity {
    "Position ID"
    id: String!

    "Holder of the position - address"
    party: Bytes!

    "Amount of tokens corresponding to this position"
    balance: BigInt!

    "Status of the agreement position"
    status: PositionStatus!

    "Agreement this position belongs to"
    agreement: Agreement! 
}

enum ResolutionStatus {
    Submitted
    Appealed
    Endorsed
    Executed
}

type Dispute @entity {
    "Dispute id"
    id: String!

    "Agreement in dispute"
    agreement: Agreement

    "Time of the dispute creation"
    createdAt: BigInt!

    "Resolution Id"
    resolution: Bytes

    "Last submitted settlement"
    settlement: Settlement

    "All settlements linked to a dispute"
    settlements: [Settlement!] @derivedFrom(field: "dispute")
}

type Settlement @entity {
    "Settlement ID"
    id: String!

    "Disputed ID"
    dispute: Dispute!

    "Time of the submission"
    submittedAt: BigInt!

    "Resolution Status"
    status: ResolutionStatus!
}
