{
  "language": "Solidity",
  "sources": {
    "src/interfaces/CriteriaTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @notice Data estructure used to prove membership to a criteria tree.\n/// @dev Account, token & amount are used to encode the leaf.\nstruct CriteriaResolver {\n    // Address that is part of the criteria tree\n    address account;\n    // Amount of ERC20 token\n    uint256 balance;\n    // Proof of membership to the tree\n    bytes32[] proof;\n}\n"
    },
    "src/libraries/CriteriaResolution.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport { CriteriaResolver } from \"src/interfaces/CriteriaTypes.sol\";\n\n/// @dev Thrown when the proof provided can't be verified against the criteria tree.\nerror InvalidCriteriaProof();\n\n/// @dev Methods to verify membership to a criteria Merkle tree.\nlibrary CriteriaResolution {\n    /// @dev Check that given resolver is valid for the provided criteria.\n    /// @param criteria Root of the Merkle tree.\n    /// @param resolver Struct with the required params to prove membership to the tree.\n    function validateCriteria(bytes32 criteria, CriteriaResolver calldata resolver) external pure {\n        bool isValid = verifyProof(resolver.proof, criteria, encodeLeaf(resolver));\n\n        if (!isValid) {\n            revert InvalidCriteriaProof();\n        }\n    }\n\n    /// @dev Encode resolver params into merkle leaf\n    function encodeLeaf(CriteriaResolver calldata resolver) public pure returns (bytes32 leaf) {\n        leaf = keccak256(abi.encode(resolver.account, resolver.balance));\n    }\n\n    /// @dev Based on Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/MerkleProofLib.sol)\n    ///      Verify proofs for given root and leaf are correct.\n    function verifyProof(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) public pure returns (bool isValid) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if proof.length {\n                // Left shifting by 5 is like multiplying by 32.\n                let end := add(proof.offset, shl(5, proof.length))\n\n                // Initialize offset to the offset of the proof in calldata.\n                let offset := proof.offset\n\n                // Iterate over proof elements to compute root hash.\n                // prettier-ignore\n                for {} 1 {} {\n                    // Slot where the leaf should be put in scratch space. If\n                    // leaf > calldataload(offset): slot 32, otherwise: slot 0.\n                    let leafSlot := shl(5, gt(leaf, calldataload(offset)))\n\n                    // Store elements to hash contiguously in scratch space.\n                    // The xor puts calldataload(offset) in whichever slot leaf\n                    // is not occupying, so 0 if leafSlot is 32, and 32 otherwise.\n                    mstore(leafSlot, leaf)\n                    mstore(xor(leafSlot, 32), calldataload(offset))\n\n                    // Reuse leaf to store the hash to reduce stack operations.\n                    leaf := keccak256(0, 64) // Hash both slots of scratch space.\n\n                    offset := add(offset, 32) // Shift 1 word per cycle.\n\n                    // prettier-ignore\n                    if iszero(lt(offset, end)) { break }\n                }\n            }\n\n            isValid := eq(leaf, root) // The proof is valid if the roots match.\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/",
      "forge-std/=lib/forge-std/src/",
      "murky/=lib/murky/src/",
      "openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/",
      "permit2/=lib/permit2/",
      "solmate/=lib/solmate/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "london",
    "viaIR": true,
    "libraries": {
      "src/libraries/CriteriaResolution.sol": {
        "CriteriaResolution": "0x214B6331a42A61070a10918A7B353097D994a3a2"
      }
    }
  }
}
